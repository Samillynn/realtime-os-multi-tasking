svc code of diff functions
Create -> 1
Yield -> 2
Exit -> 3
MyId -> 11
MyParentId -> 12



1. call assembly in c for each syscall, use esr_el1 directly

2. call svc(x) -> put x to esl ->
    check task descriptor

myId():
    __asm__(svc ?)

i want to pass :
from kernel -> still difficult? no -> load from task -> eret -> clean x0
to kernel -> how to make easier ->
    store x30 to sp
    pass

ldr_global reg, var = ldr reg =var; ldr reg [reg]
exception_entry:
    context_switch to kernel
    mv x0 esr#code
    mv x1 esr#type
    handle_exception(type, code)
    reschedule

reschedule(){
    set currentTask
    call enterUser
}

svcCalls = array
handle_interrupt(type, code){
    if type is svc:
        ct.x[0] = interr_hand[x]()
   return
}

